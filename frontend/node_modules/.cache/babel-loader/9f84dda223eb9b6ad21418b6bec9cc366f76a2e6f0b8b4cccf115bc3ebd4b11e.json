{"ast":null,"code":"\"use client\";\n\n// src/devtools.tsx\nimport { useEffect, useRef, useState } from \"react\";\nimport { onlineManager, useQueryClient } from \"@tanstack/react-query\";\nimport { TanstackQueryDevtools } from \"@tanstack/query-devtools\";\nimport React from \"react\";\nfunction ReactQueryDevtools(props) {\n  const queryClient = useQueryClient();\n  const client = props.client || queryClient;\n  const ref = useRef(null);\n  const {\n    buttonPosition,\n    position,\n    initialIsOpen,\n    errorTypes\n  } = props;\n  const [devtools] = useState(new TanstackQueryDevtools({\n    client,\n    queryFlavor: \"React Query\",\n    version: \"5\",\n    onlineManager,\n    buttonPosition,\n    position,\n    initialIsOpen,\n    errorTypes\n  }));\n  useEffect(() => {\n    devtools.setClient(client);\n  }, [client, devtools]);\n  useEffect(() => {\n    if (buttonPosition) {\n      devtools.setButtonPosition(buttonPosition);\n    }\n  }, [buttonPosition, devtools]);\n  useEffect(() => {\n    if (position) {\n      devtools.setPosition(position);\n    }\n  }, [position, devtools]);\n  useEffect(() => {\n    devtools.setInitialIsOpen(initialIsOpen || false);\n  }, [initialIsOpen, devtools]);\n  useEffect(() => {\n    devtools.setErrorTypes(errorTypes || []);\n  }, [errorTypes, devtools]);\n  useEffect(() => {\n    if (ref.current) {\n      devtools.mount(ref.current);\n    }\n    return () => {\n      devtools.unmount();\n    };\n  }, [devtools]);\n  return /* @__PURE__ */React.createElement(\"div\", {\n    className: \"tsqd-parent-container\",\n    ref\n  });\n}\nexport { ReactQueryDevtools };","map":{"version":3,"names":["useEffect","useRef","useState","onlineManager","useQueryClient","TanstackQueryDevtools","React","ReactQueryDevtools","props","queryClient","client","ref","buttonPosition","position","initialIsOpen","errorTypes","devtools","queryFlavor","version","setClient","setButtonPosition","setPosition","setInitialIsOpen","setErrorTypes","current","mount","unmount","createElement","className"],"sources":["/Users/mac/Desktop/FORESE/DB_Software/frontend/node_modules/@tanstack/react-query-devtools/src/devtools.tsx"],"sourcesContent":["'use client'\nimport { useEffect, useRef, useState } from 'react'\nimport { onlineManager, useQueryClient } from '@tanstack/react-query'\nimport { TanstackQueryDevtools } from '@tanstack/query-devtools'\nimport React from 'react'\nimport type {\n  DevToolsErrorType,\n  DevtoolsButtonPosition,\n  DevtoolsPosition,\n} from '@tanstack/query-devtools'\nimport type { QueryClient } from '@tanstack/react-query'\n\nexport interface DevtoolsOptions {\n  /**\n   * Set this true if you want the dev tools to default to being open\n   */\n  initialIsOpen?: boolean\n  /**\n   * The position of the React Query logo to open and close the devtools panel.\n   * 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right'\n   * Defaults to 'bottom-left'.\n   */\n  buttonPosition?: DevtoolsButtonPosition\n  /**\n   * The position of the React Query devtools panel.\n   * 'top' | 'bottom' | 'left' | 'right'\n   * Defaults to 'bottom'.\n   */\n  position?: DevtoolsPosition\n  /**\n   * Custom instance of QueryClient\n   */\n  client?: QueryClient\n  /**\n   * Use this so you can define custom errors that can be shown in the devtools.\n   */\n  errorTypes?: Array<DevToolsErrorType>\n}\n\nexport function ReactQueryDevtools(\n  props: DevtoolsOptions,\n): React.ReactElement | null {\n  const queryClient = useQueryClient()\n  const client = props.client || queryClient\n  const ref = useRef<HTMLDivElement>(null)\n  const { buttonPosition, position, initialIsOpen, errorTypes } = props\n  const [devtools] = useState(\n    new TanstackQueryDevtools({\n      client: client,\n      queryFlavor: 'React Query',\n      version: '5',\n      onlineManager,\n      buttonPosition,\n      position,\n      initialIsOpen,\n      errorTypes,\n    }),\n  )\n\n  useEffect(() => {\n    devtools.setClient(client)\n  }, [client, devtools])\n\n  useEffect(() => {\n    if (buttonPosition) {\n      devtools.setButtonPosition(buttonPosition)\n    }\n  }, [buttonPosition, devtools])\n\n  useEffect(() => {\n    if (position) {\n      devtools.setPosition(position)\n    }\n  }, [position, devtools])\n\n  useEffect(() => {\n    devtools.setInitialIsOpen(initialIsOpen || false)\n  }, [initialIsOpen, devtools])\n\n  useEffect(() => {\n    devtools.setErrorTypes(errorTypes || [])\n  }, [errorTypes, devtools])\n\n  useEffect(() => {\n    if (ref.current) {\n      devtools.mount(ref.current)\n    }\n\n    return () => {\n      devtools.unmount()\n    }\n  }, [devtools])\n\n  return <div className=\"tsqd-parent-container\" ref={ref}></div>\n}\n"],"mappings":";;;AACA,SAASA,SAAA,EAAWC,MAAA,EAAQC,QAAA,QAAgB;AAC5C,SAASC,aAAA,EAAeC,cAAA,QAAsB;AAC9C,SAASC,qBAAA,QAA6B;AACtC,OAAOC,KAAA,MAAW;AAmCX,SAASC,mBACdC,KAAA,EAC2B;EAC3B,MAAMC,WAAA,GAAcL,cAAA,CAAe;EACnC,MAAMM,MAAA,GAASF,KAAA,CAAME,MAAA,IAAUD,WAAA;EAC/B,MAAME,GAAA,GAAMV,MAAA,CAAuB,IAAI;EACvC,MAAM;IAAEW,cAAA;IAAgBC,QAAA;IAAUC,aAAA;IAAeC;EAAW,IAAIP,KAAA;EAChE,MAAM,CAACQ,QAAQ,IAAId,QAAA,CACjB,IAAIG,qBAAA,CAAsB;IACxBK,MAAA;IACAO,WAAA,EAAa;IACbC,OAAA,EAAS;IACTf,aAAA;IACAS,cAAA;IACAC,QAAA;IACAC,aAAA;IACAC;EACF,CAAC,CACH;EAEAf,SAAA,CAAU,MAAM;IACdgB,QAAA,CAASG,SAAA,CAAUT,MAAM;EAC3B,GAAG,CAACA,MAAA,EAAQM,QAAQ,CAAC;EAErBhB,SAAA,CAAU,MAAM;IACd,IAAIY,cAAA,EAAgB;MAClBI,QAAA,CAASI,iBAAA,CAAkBR,cAAc;IAC3C;EACF,GAAG,CAACA,cAAA,EAAgBI,QAAQ,CAAC;EAE7BhB,SAAA,CAAU,MAAM;IACd,IAAIa,QAAA,EAAU;MACZG,QAAA,CAASK,WAAA,CAAYR,QAAQ;IAC/B;EACF,GAAG,CAACA,QAAA,EAAUG,QAAQ,CAAC;EAEvBhB,SAAA,CAAU,MAAM;IACdgB,QAAA,CAASM,gBAAA,CAAiBR,aAAA,IAAiB,KAAK;EAClD,GAAG,CAACA,aAAA,EAAeE,QAAQ,CAAC;EAE5BhB,SAAA,CAAU,MAAM;IACdgB,QAAA,CAASO,aAAA,CAAcR,UAAA,IAAc,EAAE;EACzC,GAAG,CAACA,UAAA,EAAYC,QAAQ,CAAC;EAEzBhB,SAAA,CAAU,MAAM;IACd,IAAIW,GAAA,CAAIa,OAAA,EAAS;MACfR,QAAA,CAASS,KAAA,CAAMd,GAAA,CAAIa,OAAO;IAC5B;IAEA,OAAO,MAAM;MACXR,QAAA,CAASU,OAAA,CAAQ;IACnB;EACF,GAAG,CAACV,QAAQ,CAAC;EAEb,OAAO,eAAAV,KAAA,CAAAqB,aAAA,CAAC;IAAIC,SAAA,EAAU;IAAwBjB;EAAA,CAAU;AAC1D"},"metadata":{},"sourceType":"module","externalDependencies":[]}